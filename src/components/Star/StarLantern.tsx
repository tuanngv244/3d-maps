/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/star_lantern.glb -o src/components/StarLantern.jsx -r public
Author: simsora13 (https://sketchfab.com/simsora13)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/star-lantern-098d775b197f44fe91f8c6d3ab98c47c
Title: star Lantern
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useEffect, useRef } from "react";

const StarLantern = ({ animation, ...props }) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/models/star_lantern.glb");
  const { actions } = useAnimations(animations, group);
  const rotationSpeed = useRef(Math.random() * 0.5 + 0.2); // Random speed 0.2-0.7

  useEffect(() => {
    actions["idle"]?.actions[animation]?.reset().fadeIn(0.24).play();
    return () => actions?.[animation]?.fadeOut(0.24);
  }, [animation]);

  useFrame((state, delta) => {
    if (group.current) {
      // group.current.rotation.y += delta * rotationSpeed.current;
    }
  });
  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={6.089}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            geometry={nodes.Object_4.geometry}
            material={materials["Material.002"]}
            position={[-1.396, 0.944, 0.05]}
            rotation={[0.714, 0.71, 0.153]}
            scale={0.057}
          />
        </group>
      </group>
    </group>
  );
};
export default StarLantern;
useGLTF.preload("/models/star_lantern.glb");
